/**
 * Production Tools - Office Suite (PowerPoint, Excel, Word)
 *
 * OHNE PDF-Parse - reine Office-Dokument-Erstellung
 * F√ºr PDF-Funktionalit√§t siehe production-tools.js
 */

const PptxGenJS = require('pptxgenjs');
const ExcelJS = require('exceljs');
const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } = require('docx');
const fs = require('fs').promises;
const path = require('path');

// File-Server f√ºr Download-Links
let fileServer = null;
try {
  fileServer = require('./file-server');
} catch (error) {
  console.log('‚ö†Ô∏è  file-server.js nicht verf√ºgbar - Download-Links werden nicht generiert');
}

// Output-Verzeichnis f√ºr generierte Dateien
const OUTPUT_DIR = process.env.OUTPUT_DIR || path.join(__dirname, 'output');

// Stelle sicher, dass Output-Verzeichnis existiert
async function ensureOutputDir() {
  try {
    await fs.access(OUTPUT_DIR);
  } catch {
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
    console.log(`üìÅ Created output directory: ${OUTPUT_DIR}`);
  }
}

/**
 * PowerPoint-Erstellung (Production)
 *
 * @param {Object} parameters - PowerPoint-Parameter
 * @param {string} parameters.title - Titel der Pr√§sentation
 * @param {Array} parameters.slides - Array von Folien
 * @param {string} parameters.filename - Dateiname (optional)
 * @returns {Promise<Object>} - Ergebnis mit Dateipfad
 */
async function createPowerPoint(parameters) {
  await ensureOutputDir();

  const { title, slides, filename } = parameters;

  // Validierung
  if (!title || !slides || !Array.isArray(slides)) {
    throw new Error('Invalid parameters: title and slides[] required');
  }

  // Erstelle neue Pr√§sentation
  const pptx = new PptxGenJS();

  // Pr√§sentations-Metadaten
  pptx.author = 'AALS Software AG - MCP Server';
  pptx.company = 'AALS Software AG';
  pptx.title = title;
  pptx.subject = 'Generated via MCP PowerPoint Skill';

  // Erstelle Titelfolie
  const titleSlide = pptx.addSlide();
  titleSlide.addText(title, {
    x: 0.5,
    y: 2.5,
    w: 9,
    h: 1.5,
    fontSize: 44,
    bold: true,
    color: '363636',
    align: 'center'
  });

  titleSlide.addText('Generated by AALS MCP Server', {
    x: 0.5,
    y: 4.5,
    w: 9,
    h: 0.5,
    fontSize: 14,
    color: '666666',
    align: 'center',
    italic: true
  });

  // Erstelle Content-Folien
  slides.forEach((slideData, index) => {
    const slide = pptx.addSlide();

    // Slide-Titel
    if (slideData.title) {
      slide.addText(slideData.title, {
        x: 0.5,
        y: 0.5,
        w: 9,
        h: 0.75,
        fontSize: 32,
        bold: true,
        color: '363636'
      });
    }

    // Slide-Content
    if (slideData.content && Array.isArray(slideData.content)) {
      const contentText = slideData.content.map((item, i) => {
        return {
          text: `‚Ä¢ ${item}`,
          options: {
            fontSize: 18,
            color: '555555',
            bullet: false,
            breakLine: i < slideData.content.length - 1
          }
        };
      });

      slide.addText(contentText, {
        x: 0.5,
        y: 1.5,
        w: 9,
        h: 4.5,
        fontSize: 18,
        color: '555555'
      });
    }
  });

  // Dateiname generieren
  let outputFilename = filename || `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pptx`;
  if (!outputFilename.endsWith('.pptx')) outputFilename += '.pptx';
  const outputPath = path.join(OUTPUT_DIR, outputFilename);

  // Datei speichern
  await pptx.writeFile({ fileName: outputPath });

  console.log(`‚úÖ PowerPoint erstellt: ${outputPath}`);

  // Dateigr√∂√üe ermitteln
  const stats = await fs.stat(outputPath);
  const fileSizeKB = (stats.size / 1024).toFixed(2);

  // Download-Link generieren
  let downloadInfo = null;
  if (fileServer) {
    downloadInfo = fileServer.generateDownloadToken(outputPath, 60); // 60 Minuten g√ºltig
  }

  const result = {
    success: true,
    tool: 'create_powerpoint',
    filename: outputFilename,
    filepath: outputPath,
    file_size: `${fileSizeKB} KB`,
    slide_count: slides.length + 1, // +1 f√ºr Titelfolie
    title: title,
    mode: 'PRODUCTION',
    timestamp: new Date().toISOString()
  };

  // Download-Infos hinzuf√ºgen, falls verf√ºgbar
  if (downloadInfo) {
    result.download_url = downloadInfo.download_url;
    result.download_token = downloadInfo.token;
    result.download_expires_at = downloadInfo.expires_at;
    result.download_expires_in = `${downloadInfo.expires_in_minutes} Minuten`;
  }

  return result;
}

/**
 * Excel-Erstellung (Production)
 *
 * @param {Object} parameters - Excel-Parameter
 * @param {string} parameters.filename - Dateiname
 * @param {Array} parameters.sheets - Array von Sheets mit Daten
 * @returns {Promise<Object>} - Ergebnis mit Dateipfad
 */
async function createExcel(parameters) {
  await ensureOutputDir();

  const { filename, sheets } = parameters;
n  // Dateiname generieren
  let outputFilename = filename || `${(parameters.title || 'spreadsheet').replace(/[^a-z0-9]/gi, '_').toLowerCase()}.xlsx`;
  if (!outputFilename.endsWith('.xlsx')) outputFilename += '.xlsx';
  const outputPath = path.join(OUTPUT_DIR, outputFilename);

  // Validierung
  if (!filename || !sheets || !Array.isArray(sheets)) {
    throw new Error('Invalid parameters: filename and sheets[] required');
  }

  // Erstelle neues Workbook
  const workbook = new ExcelJS.Workbook();
  workbook.creator = 'AALS Software AG - MCP Server';
  workbook.created = new Date();

  // Erstelle Sheets
  sheets.forEach((sheetData) => {
    const worksheet = workbook.addWorksheet(sheetData.name || 'Sheet1');

    if (sheetData.data && Array.isArray(sheetData.data)) {
      // Header-Styling
      if (sheetData.data.length > 0) {
        worksheet.addRow(sheetData.data[0]);
        const headerRow = worksheet.getRow(1);
        headerRow.font = { bold: true };
        headerRow.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFE0E0E0' }
        };

        // Daten-Rows
        for (let i = 1; i < sheetData.data.length; i++) {
          worksheet.addRow(sheetData.data[i]);
        }

        // Auto-fit Spaltenbreite
        worksheet.columns.forEach((column, i) => {
          let maxLength = 10;
          column.eachCell({ includeEmpty: true }, (cell) => {
            const cellLength = cell.value ? cell.value.toString().length : 10;
            if (cellLength > maxLength) {
              maxLength = cellLength;
            }
          });
          column.width = Math.min(maxLength + 2, 50);
        });
      }
    }
  });

  // Datei speichern
  const outputPath = path.join(OUTPUT_DIR, filename);
  await workbook.xlsx.writeFile(outputPath);

  console.log(`‚úÖ Excel erstellt: ${outputPath}`);

  // Dateigr√∂√üe ermitteln
  const stats = await fs.stat(outputPath);
  const fileSizeKB = (stats.size / 1024).toFixed(2);

  return {
    success: true,
    tool: 'create_excel',
    filename: filename,
    filepath: outputPath,
    file_size: `${fileSizeKB} KB`,
    sheet_count: sheets.length,
    mode: 'PRODUCTION',
    timestamp: new Date().toISOString()
  };
}

/**
 * Word-Dokument-Erstellung (Production)
 *
 * @param {Object} parameters - Word-Parameter
 * @param {string} parameters.title - Titel des Dokuments
 * @param {string} parameters.content - Inhalt (Markdown oder Plain Text)
 * @param {string} parameters.filename - Dateiname (optional)
 * @returns {Promise<Object>} - Ergebnis mit Dateipfad
 */
async function createWord(parameters) {
  await ensureOutputDir();

  const { title, content, filename } = parameters;

  // Validierung
  if (!title || !content) {
    throw new Error('Invalid parameters: title and content required');
  }
  const contentArray = Array.isArray(content) ? content : content.split('\n\n');

  // Erstelle Dokument
  const doc = new Document({
    creator: 'AALS Software AG - MCP Server',
    title: title,
    description: 'Generated via MCP Word Skill',
    sections: [{
      properties: {},
      children: [
        // Titel
        new Paragraph({
          text: title,
          heading: HeadingLevel.HEADING_1,
          alignment: AlignmentType.CENTER,
          spacing: { after: 400 }
        }),
        // Content (einfache Abs√§tze)
        ...contentArray.map(para =>
          new Paragraph({
            children: [
              new TextRun({
                text: para,
                size: 24
              })
            ],
            spacing: { after: 200 }
          })
        ),
        // Footer
        new Paragraph({
          text: `Generated by AALS MCP Server - ${new Date().toLocaleDateString()}`,
          alignment: AlignmentType.CENTER,
          spacing: { before: 400 },
          italics: true
        })
      ]
    }]
  });

  // Dateiname generieren
  let outputFilename = filename || `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.docx`;
  if (!outputFilename.endsWith('.docx')) outputFilename += '.docx';
  const outputPath = path.join(OUTPUT_DIR, outputFilename);

  // Datei speichern
  const buffer = await Packer.toBuffer(doc);
  await fs.writeFile(outputPath, buffer);

  console.log(`‚úÖ Word-Dokument erstellt: ${outputPath}`);

  // Dateigr√∂√üe ermitteln
  const stats = await fs.stat(outputPath);
  const fileSizeKB = (stats.size / 1024).toFixed(2);

  return {
    success: true,
    tool: 'create_word',
    filename: outputFilename,
    filepath: outputPath,
    file_size: `${fileSizeKB} KB`,
    title: title,
    mode: 'PRODUCTION',
    timestamp: new Date().toISOString()
  };
}

/**
 * Tool-Executor f√ºr Office-Tools
 */
async function executeOfficeTool(toolName, parameters) {
  console.log(`üîß Office Tool: ${toolName}`);

  try {
    let result;

    switch (toolName) {
      case 'create_powerpoint':
      case 'create_powerpoint_presentation':
        result = await createPowerPoint(parameters);
        break;

      case 'create_excel':
      case 'create_excel_spreadsheet':
        result = await createExcel(parameters);
        break;

      case 'create_word':
      case 'create_word_document':
        result = await createWord(parameters);
        break;

      default:
        throw new Error(`Unknown office tool: ${toolName}`);
    }

    result.mode = 'PRODUCTION';
    return result;

  } catch (error) {
    console.error(`‚ùå Office tool error (${toolName}):`, error);
    throw error;
  }
}

module.exports = {
  executeOfficeTool,
  createPowerPoint,
  createExcel,
  createWord
};
