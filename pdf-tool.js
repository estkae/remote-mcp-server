/**
 * PDF Document Creation Tool
 *
 * Creates PDF documents similar to Word documents
 */

const PDFDocument = require('pdfkit');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');

// Output-Verzeichnis f√ºr generierte Dateien
const OUTPUT_DIR = process.env.OUTPUT_DIR || path.join(__dirname, 'output');

// Stelle sicher, dass Output-Verzeichnis existiert
async function ensureOutputDir() {
  try {
    await fs.access(OUTPUT_DIR);
  } catch {
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
    console.log(`üìÅ Created output directory: ${OUTPUT_DIR}`);
  }
}

/**
 * PDF-Dokument-Erstellung (Production)
 *
 * @param {Object} parameters - PDF-Parameter
 * @param {string} parameters.title - Titel des Dokuments
 * @param {string|Array} parameters.content - Inhalt (Text oder Array von Abs√§tzen)
 * @param {string} parameters.filename - Dateiname (optional)
 * @returns {Promise<Object>} - Ergebnis mit Dateipfad
 */
async function createPDF(parameters) {
  await ensureOutputDir();

  const { title, content, filename } = parameters;

  // Validierung
  if (!title || !content) {
    throw new Error('Invalid parameters: title and content required');
  }

  const contentArray = Array.isArray(content) ? content : content.split('\n\n');

  // Dateiname generieren
  let outputFilename = filename || `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  if (!outputFilename.endsWith('.pdf')) outputFilename += '.pdf';
  const outputPath = path.join(OUTPUT_DIR, outputFilename);

  // PDF-Dokument erstellen
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 72,
          bottom: 72,
          left: 72,
          right: 72
        },
        info: {
          Title: title,
          Author: 'AALS Software AG - MCP Server',
          Subject: 'Generated via MCP PDF Skill',
          Creator: 'AALS MCP Server'
        }
      });

      const writeStream = fsSync.createWriteStream(outputPath);

      // Error handling f√ºr Stream
      writeStream.on('error', (error) => {
        reject(error);
      });

      // Pipe PDF in Datei
      doc.pipe(writeStream);

      // Titel
      doc
        .fontSize(24)
        .font('Helvetica-Bold')
        .text(title, {
          align: 'center'
        })
        .moveDown(2);

      // Content (Abs√§tze)
      doc.fontSize(12).font('Helvetica');

      contentArray.forEach((paragraph, index) => {
        if (paragraph.trim()) {
          doc.text(paragraph.trim(), {
            align: 'justify',
            indent: 0,
            paragraphGap: 10
          });

          if (index < contentArray.length - 1) {
            doc.moveDown(1);
          }
        }
      });

      // Footer
      doc
        .moveDown(3)
        .fontSize(10)
        .font('Helvetica-Oblique')
        .text(
          `Generated by AALS MCP Server - ${new Date().toLocaleDateString('de-DE')}`,
          {
            align: 'center'
          }
        );

      // Finalize PDF
      doc.end();

      // Warte auf Stream-Ende
      writeStream.on('finish', async () => {
        try {
          console.log(`‚úÖ PDF-Dokument erstellt: ${outputPath}`);

          // Dateigr√∂√üe ermitteln
          const stats = await fs.stat(outputPath);
          const fileSizeKB = (stats.size / 1024).toFixed(2);

          resolve({
            success: true,
            tool: 'create_pdf',
            filename: outputFilename,
            filepath: outputPath,
            file_size: `${fileSizeKB} KB`,
            title: title,
            mode: 'PRODUCTION',
            timestamp: new Date().toISOString()
          });
        } catch (error) {
          reject(error);
        }
      });
    } catch (error) {
      reject(error);
    }
  });
}

module.exports = {
  createPDF
};
