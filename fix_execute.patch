--- remote-mcp-server-with-skills.js.orig
+++ remote-mcp-server-with-skills.js
@@ -345,7 +345,13 @@
     if (tool === 'skill_router') {
       // Route intern
       const routeResult = selectSkills(parameters.user_request, parameters.context);
       result = routeResult;
+    } else if (tool === 'list_all_skills') {
+      // Liste alle Skills auf
+      result = formatAllSkillsList();
+    } else if (tool === 'execute_skill_tool') {
+      // F√ºhre spezifisches Tool aus
+      result = await executeSpecificSkillTool(parameters.tool_name, parameters.parameters);
     } else {
       // Simuliere Tool-Ausf√ºhrung (in Produktion: delegiere an spezialisierte Services)
       result = await simulateToolExecution(tool, parameters);
@@ -359,6 +365,47 @@
   }
 });
 
+// Formatiere alle Skills f√ºr list_all_skills Tool
+function formatAllSkillsList() {
+  const formattedSkills = skillDefinitions.skills.map(skill => ({
+    id: skill.id,
+    name: skill.name,
+    description: skill.description,
+    keywords: skill.keywords,
+    tools: skill.tools.map(t => ({
+      name: t.name,
+      description: t.description
+    }))
+  }));
+
+  return {
+    total_skills: skillDefinitions.skills.length,
+    skills: formattedSkills,
+    message: \`üìö Verf√ºgbare Skills (\${skillDefinitions.skills.length}):\n\n\` +
+      formattedSkills.map((skill, index) =>
+        \`\${index + 1}. **\${skill.name}** - \${skill.description}\n\` +
+        \`   ID: \${skill.id}\n\` +
+        \`   Tools: \${skill.tools.map(t => t.name).join(', ')}\n\` +
+        \`   Keywords: \${skill.keywords.join(', ')}\`
+      ).join('\n\n') +
+      \`\n\nüí° Tipp: Verwende skill_router(user_request) um automatisch die richtigen Skills auszuw√§hlen.\`
+  };
+}
+
+// F√ºhre ein spezifisches Tool aus einem Skill aus
+async function executeSpecificSkillTool(toolName, parameters) {
+  // Finde das Tool in allen Skills
+  for (const skill of skillDefinitions.skills) {
+    const tool = skill.tools.find(t => t.name === toolName);
+    if (tool) {
+      return {
+        success: true,
+        skill: skill.name,
+        skill_id: skill.id,
+        tool: toolName,
+        parameters: parameters,
+        message: \`‚úÖ Tool "\${toolName}" aus "\${skill.name}" w√ºrde in Produktion ausgef√ºhrt\`,
+        note: 'Dies ist eine Simulation. In Produktion w√ºrde das Tool die reale Aktion ausf√ºhren.',
+        timestamp: new Date().toISOString()
+      };
+    }
+  }
+
+  throw new Error(\`Tool "\${toolName}" nicht gefunden\`);
+}
+
 // Tool-Simulation (Fallback wenn keine spezialisierten Services verf√ºgbar)
 async function simulateToolExecution(toolName, parameters) {
   // Finde Skill f√ºr dieses Tool
